// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vStZs4oovvtk4EJiDhWZhg
// Component: EU8OeGwuC2qS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import PageLayout from "../../PageLayout"; // plasmic-import: u4-THcRWcR5h/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import Tilt from "@plasmicpkgs/react-parallax-tilt";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";

import { useScreenVariants as useScreenVariantssoBw3NbEif13 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: soBw3nbEIF13/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: vStZs4oovvtk4EJiDhWZhg/projectcss
import sty from "./PlasmicCards.module.css"; // plasmic-import: EU8OeGwuC2qS/css

import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: PpAKhxcYa1Y-/icon

createPlasmicElementProxy;

export type PlasmicCards__VariantMembers = {};
export type PlasmicCards__VariantsArgs = {};
type VariantPropType = keyof PlasmicCards__VariantsArgs;
export const PlasmicCards__VariantProps = new Array<VariantPropType>();

export type PlasmicCards__ArgsType = {};
type ArgPropType = keyof PlasmicCards__ArgsType;
export const PlasmicCards__ArgProps = new Array<ArgPropType>();

export type PlasmicCards__OverridesType = {
  root?: Flex__<typeof PageLayout>;
  input?: Flex__<typeof AntdInput>;
  button?: Flex__<typeof AntdButton>;
  svg?: Flex__<"svg">;
  h6Bold700LineHeight12?: Flex__<"div">;
  cmsDataFetcher?: Flex__<typeof CmsQueryRepeater>;
  tilt?: Flex__<typeof Tilt>;
};

export interface DefaultCardsProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCards__RenderFunc(props: {
  variants: PlasmicCards__VariantsArgs;
  args: PlasmicCards__ArgsType;
  overrides: PlasmicCards__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssoBw3NbEif13()
  });

  return (
    <PageLayout
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
    >
      <DataCtxReader__>
        {$ctx => (
          <React.Fragment>
            <section className={classNames(projectcss.all, sty.section__dgNw)}>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input", "value"],
                    AntdInput_Helpers
                  ),
                  value: generateStateValueProp($state, ["input", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input.value"
                    }
                  ],
                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"input"}
                    data-plasmic-override={overrides.input}
                    {...child$Props}
                  />
                );
              })()}
              <AntdButton
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                onClick={async () => {
                  const $steps = {};

                  $steps["goToHomepage"] = true
                    ? (() => {
                        const actionArgs = { destination: `/projects` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHomepage"] != null &&
                    typeof $steps["goToHomepage"] === "object" &&
                    typeof $steps["goToHomepage"].then === "function"
                  ) {
                    $steps["goToHomepage"] = await $steps["goToHomepage"];
                  }
                }}
              >
                <Icon6Icon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"h6Bold700LineHeight12"}
                  data-plasmic-override={overrides.h6Bold700LineHeight12}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.h6Bold700LineHeight12
                  )}
                >
                  {"New Plan"}
                </div>
              </AntdButton>
            </section>
            <section className={classNames(projectcss.all, sty.section__fx4Q)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return [2];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <CmsQueryRepeater
                    data-plasmic-name={"cmsDataFetcher"}
                    data-plasmic-override={overrides.cmsDataFetcher}
                    className={classNames("__wab_instance", sty.cmsDataFetcher)}
                    desc={false}
                    emptyMessage={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__j63Xk
                            )}
                          >
                            {"No matching published entries found."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    forceEmptyState={false}
                    forceLoadingState={false}
                    key={currentIndex}
                    limit={0}
                    loadingMessage={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pSijv
                            )}
                          >
                            {"Loading..."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    noAutoRepeat={false}
                    noLayout={false}
                    useDraft={false}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <Tilt
                          data-plasmic-name={"tilt"}
                          data-plasmic-override={overrides.tilt}
                          className={classNames("__wab_instance", sty.tilt)}
                          glareBorderRadius={"3px"}
                          glareEnable={false}
                          glarePosition={"all"}
                          tiltEnable={true}
                          tiltReverse={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__wrX9J
                            )}
                            onAnimationStart={async event => {
                              const $steps = {};

                              $steps["updateInputValue"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["input", "value"]
                                      },
                                      operation: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateInputValue"] != null &&
                                typeof $steps["updateInputValue"] ===
                                  "object" &&
                                typeof $steps["updateInputValue"].then ===
                                  "function"
                              ) {
                                $steps["updateInputValue"] = await $steps[
                                  "updateInputValue"
                                ];
                              }
                            }}
                            onClick={async event => {
                              const $steps = {};

                              $steps["goToPage"] = (() => {
                                try {
                                  return (
                                    $ctx.plasmicCmsHousesItem.data.status !==
                                    "Build in Progress"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()
                                ? (() => {
                                    const actionArgs = {};
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToPage"] != null &&
                                typeof $steps["goToPage"] === "object" &&
                                typeof $steps["goToPage"].then === "function"
                              ) {
                                $steps["goToPage"] = await $steps["goToPage"];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__hp5T9
                              )}
                            >
                              <CmsRowField
                                className={classNames(
                                  "__wab_instance",
                                  sty.cmsEntryField__oeYPr
                                )}
                                field={"coverImage"}
                                themeResetClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.root_reset_tags,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___0UZ73
                                )}
                              >
                                {(() => {
                                  try {
                                    return (
                                      $ctx.plasmicCmsHousesItem.data.status !==
                                      "Finished"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <CmsRowField
                                    className={classNames(
                                      "__wab_instance",
                                      sty.cmsEntryField__qDdDp
                                    )}
                                    field={"status"}
                                    themeResetClassName={classNames(
                                      projectcss.root_reset,
                                      projectcss.root_reset_tags,
                                      projectcss.plasmic_default_styles,
                                      projectcss.plasmic_mixins,
                                      projectcss.plasmic_tokens,
                                      plasmic_antd_5_hostless_css.plasmic_tokens,
                                      plasmic_plasmic_rich_components_css.plasmic_tokens
                                    )}
                                  />
                                ) : null}
                              </div>
                            </div>
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__eWgN5
                              )}
                              field={"title"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___9WkEl
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ljYvr
                                )}
                              >
                                <CmsRowField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.cmsEntryField__uAnfD
                                  )}
                                  field={"bedrooms"}
                                  themeResetClassName={classNames(
                                    projectcss.root_reset,
                                    projectcss.root_reset_tags,
                                    projectcss.plasmic_default_styles,
                                    projectcss.plasmic_mixins,
                                    projectcss.plasmic_tokens,
                                    plasmic_antd_5_hostless_css.plasmic_tokens,
                                    plasmic_plasmic_rich_components_css.plasmic_tokens
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__dPkc
                                  )}
                                >
                                  {"Bedrooms"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__faN6G
                                )}
                              >
                                <CmsRowField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.cmsEntryField__pnzTz
                                  )}
                                  field={"bathrooms"}
                                  themeResetClassName={classNames(
                                    projectcss.root_reset,
                                    projectcss.root_reset_tags,
                                    projectcss.plasmic_default_styles,
                                    projectcss.plasmic_mixins,
                                    projectcss.plasmic_tokens,
                                    plasmic_antd_5_hostless_css.plasmic_tokens,
                                    plasmic_plasmic_rich_components_css.plasmic_tokens
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__b3YtD
                                  )}
                                >
                                  {"Bathrooms"}
                                </div>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__abdKc
                              )}
                            >
                              <CmsRowField
                                className={classNames(
                                  "__wab_instance",
                                  sty.cmsEntryField__eo2Av
                                )}
                                field={"squareFeet"}
                                themeResetClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.root_reset_tags,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hkj6D
                                )}
                              >
                                {"Heated Sqft"}
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oOawb
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__r77Yb
                                )}
                              >
                                {"("}
                              </div>
                              <CmsRowField
                                className={classNames(
                                  "__wab_instance",
                                  sty.cmsEntryField___5Rf2K
                                )}
                                field={"totalSquareFeet"}
                                themeResetClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.root_reset_tags,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___4Mr0O
                                )}
                              >
                                {" Total Sqft)"}
                              </div>
                            </div>
                          </div>
                        </Tilt>
                      )}
                    </DataCtxReader__>
                  </CmsQueryRepeater>
                );
              })}
            </section>
          </React.Fragment>
        )}
      </DataCtxReader__>
    </PageLayout>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "input",
    "button",
    "svg",
    "h6Bold700LineHeight12",
    "cmsDataFetcher",
    "tilt"
  ],
  input: ["input"],
  button: ["button", "svg", "h6Bold700LineHeight12"],
  svg: ["svg"],
  h6Bold700LineHeight12: ["h6Bold700LineHeight12"],
  cmsDataFetcher: ["cmsDataFetcher", "tilt"],
  tilt: ["tilt"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof PageLayout;
  input: typeof AntdInput;
  button: typeof AntdButton;
  svg: "svg";
  h6Bold700LineHeight12: "div";
  cmsDataFetcher: typeof CmsQueryRepeater;
  tilt: typeof Tilt;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCards__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCards__VariantsArgs;
    args?: PlasmicCards__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCards__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCards__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCards__ArgProps,
          internalVariantPropNames: PlasmicCards__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCards__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCards";
  } else {
    func.displayName = `PlasmicCards.${nodeName}`;
  }
  return func;
}

export const PlasmicCards = Object.assign(
  // Top-level PlasmicCards renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    input: makeNodeComponent("input"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    h6Bold700LineHeight12: makeNodeComponent("h6Bold700LineHeight12"),
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),
    tilt: makeNodeComponent("tilt"),

    // Metadata about props expected for PlasmicCards
    internalVariantProps: PlasmicCards__VariantProps,
    internalArgProps: PlasmicCards__ArgProps
  }
);

export default PlasmicCards;
/* prettier-ignore-end */
